{"version":3,"sources":["../../src/MsalAuthProvider.ts"],"names":["MsalAuthProvider","config","parameters","options","loginType","LoginType","Popup","tokenRefreshUri","window","location","origin","Set","params","getAuthenticationParameters","error","getError","errorCode","setError","providerOptions","getProviderOptions","Redirect","setAuthenticationState","AuthenticationState","InProgress","loginRedirect","Logger","ERROR","Unauthenticated","loginPopup","processLogin","dispatchAction","AuthenticationActionCreators","logoutSuccessful","_accountInfo","refreshParams","redirectUri","extraQueryParameters","domain_hint","acquireTokenSilent","response","handleAcquireTokenSuccess","Authenticated","AccessTokenResponse","loginParams","acquireAccessTokenError","loginToRefreshToken","getCurrentConfiguration","clientId","auth","scopes","IdTokenResponse","account","getAccount","loginHint","userName","acquireIdTokenError","_parameters","_error","_options","handleRedirectCallback","authenticationRedirectCallback","store","_reduxStore","_actionQueue","length","action","shift","listener","_onAuthenticationStateHandlers","add","authenticationState","_onAccountInfoHandlers","_onErrorHandlers","loginError","forEach","InteractionRequiredAuthError","acquireTokenRedirect","Promise","resolve","acquireTokenPopup","initializing","initialized","handleLoginFailed","getIdToken","handleLoginSuccess","ClientAuthError","getLoginInProgress","state","authenticatedStateChanged","accountInfo","getAccountInfo","tokenType","TokenType","IdToken","jwtIdToken","idToken","rawIdToken","AccessToken","jwtAccessToken","accessToken","dispatch","push","setAccountInfo","token","acquireIdTokenSuccess","acquireAccessTokenSuccess","loginFailed","loginSuccessful","UserAgentApplication","setAuthenticationParameters","setProviderOptions","initializeProvider"],"mappings":"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","sourcesContent":["import {\n  AuthenticationParameters,\n  AuthError,\n  AuthResponse,\n  ClientAuthError,\n  Configuration,\n  InteractionRequiredAuthError,\n  UserAgentApplication,\n} from 'msal';\nimport { AnyAction, Store } from 'redux';\n\nimport { AccessTokenResponse } from './AccessTokenResponse';\nimport { AuthenticationActionCreators } from './AuthenticationActionCreators';\nimport { IdTokenResponse } from './IdTokenResponse';\nimport { IAccountInfo, IAuthProvider, IMsalAuthProviderConfig } from './interfaces';\nimport { Logger } from './Logger';\nimport { AuthenticationState, LoginType, TokenType } from './enums';\n\ntype AuthenticationStateHandler = (state: AuthenticationState) => void;\ntype ErrorHandler = (error: AuthError | null) => void;\ntype AccountInfoHandlers = (accountInfo: IAccountInfo | null) => void;\n\nexport class MsalAuthProvider extends UserAgentApplication implements IAuthProvider {\n  public authenticationState: AuthenticationState;\n\n  /**\n   * Gives access to the MSAL functionality for advanced usage.\n   *\n   * @deprecated The MsalAuthProvider class itself extends from UserAgentApplication and has the same functionality\n   */\n  public UserAgentApplication: UserAgentApplication;\n\n  protected _reduxStore: Store;\n  protected _parameters: AuthenticationParameters;\n  protected _options: IMsalAuthProviderConfig;\n  protected _accountInfo: IAccountInfo | null;\n  protected _error: AuthError | null;\n\n  private _onAuthenticationStateHandlers = new Set<AuthenticationStateHandler>();\n  private _onAccountInfoHandlers = new Set<AccountInfoHandlers>();\n  private _onErrorHandlers = new Set<ErrorHandler>();\n  private _actionQueue: AnyAction[] = [];\n\n  constructor(\n    config: Configuration,\n    parameters: AuthenticationParameters,\n    options: IMsalAuthProviderConfig = {\n      loginType: LoginType.Popup,\n      tokenRefreshUri: window.location.origin,\n    },\n  ) {\n    super(config);\n\n    // Required only for backward compatibility\n    this.UserAgentApplication = this as UserAgentApplication;\n\n    this.setAuthenticationParameters(parameters);\n    this.setProviderOptions(options);\n\n    this.initializeProvider();\n  }\n\n  public login = async (parameters?: AuthenticationParameters) => {\n    const params = parameters || this.getAuthenticationParameters();\n\n    // Clear any active authentication errors unless the code is executing from within\n    // the token renewal iframe\n    const error = this.getError();\n    if (error && error.errorCode !== 'block_token_requests') {\n      this.setError(null);\n    }\n\n    const providerOptions = this.getProviderOptions();\n    if (providerOptions.loginType === LoginType.Redirect) {\n      this.setAuthenticationState(AuthenticationState.InProgress);\n      try {\n        this.loginRedirect(params);\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n    } else if (providerOptions.loginType === LoginType.Popup) {\n      try {\n        this.setAuthenticationState(AuthenticationState.InProgress);\n        await this.loginPopup(params);\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n\n      await this.processLogin();\n    }\n  };\n\n  public logout = (): void => {\n    super.logout();\n\n    this.dispatchAction(AuthenticationActionCreators.logoutSuccessful());\n  };\n\n  public getAccountInfo = (): IAccountInfo | null => {\n    return this._accountInfo ? { ...this._accountInfo } : null;\n  };\n\n  public getAccessToken = async (parameters?: AuthenticationParameters): Promise<AccessTokenResponse> => {\n    const providerOptions = this.getProviderOptions();\n\n    // The parameters to be used when silently refreshing the token\n    const refreshParams = {\n      ...(parameters || this.getAuthenticationParameters()),\n      // Use the redirectUri that was passed, otherwise use the configured tokenRefreshUri\n      redirectUri: (parameters && parameters.redirectUri) || providerOptions.tokenRefreshUri,\n    };\n\n    /* In this library, acquireTokenSilent is being called only when there is an accountInfo of an expired session.\n        *  In a scenario where user interaction is required, username from the account info is passed as 'login_hint'\n        *  parameter which redirects user to user's organization login page. So 'domain_hint' is not required to be\n        *  passed for silent calls. Hence, the below code is to avoid sending domain_hint. This also solves the issue\n        *  of multiple domain_hint param being added by the MSAL.js.\n    */\n    if (refreshParams.extraQueryParameters && refreshParams.extraQueryParameters.domain_hint) {\n      delete refreshParams.extraQueryParameters.domain_hint;\n    }\n\n    try {\n      const response = await this.acquireTokenSilent(refreshParams);\n\n      this.handleAcquireTokenSuccess(response);\n      this.setAuthenticationState(AuthenticationState.Authenticated);\n\n      return new AccessTokenResponse(response);\n    } catch (error) {\n      // The parameters to be used if silent refresh failed, and a new login needs to be initiated\n      const loginParams = {\n        ...(parameters || this.getAuthenticationParameters()),\n      };\n\n      this.dispatchAction(AuthenticationActionCreators.acquireAccessTokenError(error));\n      const response = await this.loginToRefreshToken(error, loginParams);\n\n      return new AccessTokenResponse(response);\n    }\n  };\n\n  public getIdToken = async (parameters?: AuthenticationParameters): Promise<IdTokenResponse> => {\n    const providerOptions = this.getProviderOptions();\n    const config = this.getCurrentConfiguration();\n    const clientId = config.auth.clientId;\n\n    // The parameters to be used when silently refreshing the token\n    const refreshParams = {\n      ...(parameters || this.getAuthenticationParameters()),\n      // Use the redirectUri that was passed, otherwise use the configured tokenRefreshUri\n      redirectUri: (parameters && parameters.redirectUri) || providerOptions.tokenRefreshUri,\n      // Pass the clientId as the only scope to get a renewed IdToken if it has expired\n      scopes: [clientId],\n    };\n\n    /* In this library, acquireTokenSilent is being called only when there is an accountInfo of an expired session.\n        *  In a scenario where user interaction is required, username from the account info is passed as 'login_hint'\n        *  parameter which redirects user to user's organization login page. So 'domain_hint' is not required to be\n        *  passed for silent calls. Hence, the below code is to avoid sending domain_hint. This also solves the issue\n        *  of multiple domain_hint param being added by the MSAL.js.\n    */\n    if (refreshParams.extraQueryParameters && refreshParams.extraQueryParameters.domain_hint) {\n      delete refreshParams.extraQueryParameters.domain_hint;\n    }\n\n    try {\n      const response = await this.acquireTokenSilent(refreshParams);\n\n      this.handleAcquireTokenSuccess(response);\n      this.setAuthenticationState(AuthenticationState.Authenticated);\n\n      return new IdTokenResponse(response);\n    } catch (error) {\n      // The parameters to be used if silent refresh failed, and a new login needs to be initiated\n      const loginParams = {\n        ...(parameters || this.getAuthenticationParameters()),\n      };\n\n      // If the parameters do not specify a login hint and the user already has a session cached,\n      // prefer the cached user name to bypass the account selection process if possible\n      const account = this.getAccount();\n      if (account && (!parameters || !parameters.loginHint)) {\n        loginParams.loginHint = account.userName;\n      }\n\n      this.dispatchAction(AuthenticationActionCreators.acquireIdTokenError(error));\n      const response = await this.loginToRefreshToken(error, loginParams);\n\n      return new IdTokenResponse(response);\n    }\n  };\n\n  public getAuthenticationParameters = (): AuthenticationParameters => {\n    return { ...this._parameters };\n  };\n\n  public getError = () => {\n    return this._error ? { ...this._error } : null;\n  };\n\n  public setAuthenticationParameters = (parameters: AuthenticationParameters): void => {\n    this._parameters = { ...parameters };\n  };\n\n  public getProviderOptions = (): IMsalAuthProviderConfig => {\n    return { ...this._options };\n  };\n\n  public setProviderOptions = (options: IMsalAuthProviderConfig) => {\n    this._options = { ...options };\n    if (options.loginType === LoginType.Redirect) {\n      this.handleRedirectCallback(this.authenticationRedirectCallback);\n    }\n  };\n\n  public registerReduxStore = (store: Store): void => {\n    this._reduxStore = store;\n    while (this._actionQueue.length) {\n      const action = this._actionQueue.shift();\n      if (action) {\n        this.dispatchAction(action);\n      }\n    }\n  };\n\n  public registerAuthenticationStateHandler = (listener: AuthenticationStateHandler) => {\n    this._onAuthenticationStateHandlers.add(listener);\n    listener(this.authenticationState);\n  };\n\n  public unregisterAuthenticationStateHandler = (listener: AuthenticationStateHandler) => {\n    this._onAuthenticationStateHandlers.delete(listener);\n  };\n\n  public registerAcountInfoHandler = (listener: AccountInfoHandlers) => {\n    this._onAccountInfoHandlers.add(listener);\n    listener(this._accountInfo);\n  };\n\n  public unregisterAccountInfoHandler = (listener: AccountInfoHandlers) => {\n    this._onAccountInfoHandlers.delete(listener);\n  };\n\n  public registerErrorHandler = (listener: ErrorHandler) => {\n    this._onErrorHandlers.add(listener);\n    listener(this._error);\n  };\n\n  public unregisterErrorHandler = (listener: ErrorHandler) => {\n    this._onErrorHandlers.delete(listener);\n  };\n\n  private setError = (error: AuthError | null) => {\n    this._error = error ? { ...error } : null;\n\n    if (error) {\n      this.dispatchAction(AuthenticationActionCreators.loginError(error));\n    }\n\n    this._onErrorHandlers.forEach(listener => listener(this._error));\n\n    return { ...this._error };\n  };\n\n  private loginToRefreshToken = async (\n    error: AuthError,\n    parameters?: AuthenticationParameters,\n  ): Promise<AuthResponse> => {\n    const providerOptions = this.getProviderOptions();\n    const params = parameters || this.getAuthenticationParameters();\n\n    if (error instanceof InteractionRequiredAuthError) {\n      if (providerOptions.loginType === LoginType.Redirect) {\n        this.acquireTokenRedirect(params);\n\n        // Nothing to return, the user is redirected to the login page\n        return new Promise<AuthResponse>(resolve => resolve());\n      }\n\n      try {\n        const response = await this.acquireTokenPopup(params);\n        this.handleAcquireTokenSuccess(response);\n        this.setAuthenticationState(AuthenticationState.Authenticated);\n        return response;\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n\n        throw error;\n      }\n    } else {\n      Logger.ERROR(error as any);\n\n      this.setError(error);\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n\n      throw error;\n    }\n  };\n\n  private authenticationRedirectCallback = (error: AuthError) => {\n    if (error) {\n      this.setError(error);\n    }\n    this.processLogin();\n  };\n\n  private initializeProvider = async () => {\n    this.dispatchAction(AuthenticationActionCreators.initializing());\n\n    await this.processLogin();\n\n    this.dispatchAction(AuthenticationActionCreators.initialized());\n  };\n\n  private processLogin = async () => {\n    if (this.getError()) {\n      this.handleLoginFailed();\n\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n    } else if (this.getAccount()) {\n      try {\n        // If the IdToken has expired, refresh it. Otherwise use the cached token\n        await this.getIdToken();\n\n        this.handleLoginSuccess();\n      } catch (error) {\n        // Swallow the error if the user isn't authenticated, just set to Unauthenticated\n        if (!(error instanceof ClientAuthError && error.errorCode === 'user_login_error')) {\n          Logger.ERROR(error);\n          this.setError(error);\n        }\n\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n    } else if (this.getLoginInProgress()) {\n      this.setAuthenticationState(AuthenticationState.InProgress);\n    } else {\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n    }\n  };\n\n  private setAuthenticationState = (state: AuthenticationState): AuthenticationState => {\n    if (this.authenticationState !== state) {\n      this.authenticationState = state;\n\n      this.dispatchAction(AuthenticationActionCreators.authenticatedStateChanged(state));\n      this._onAuthenticationStateHandlers.forEach(listener => listener(state));\n    }\n\n    return this.authenticationState;\n  };\n\n  private setAccountInfo = (response: AuthResponse): IAccountInfo => {\n    const accountInfo: IAccountInfo = this.getAccountInfo() || ({ account: response.account } as IAccountInfo);\n\n    // Depending on the token type of the auth response, update the correct property\n    if (response.tokenType === TokenType.IdToken) {\n      accountInfo.jwtIdToken = response.idToken.rawIdToken;\n    } else if (response.tokenType === TokenType.AccessToken) {\n      accountInfo.jwtAccessToken = response.accessToken;\n    }\n\n    this._accountInfo = { ...accountInfo };\n    this._onAccountInfoHandlers.forEach(listener => listener(this._accountInfo));\n\n    return { ...this._accountInfo };\n  };\n\n  private dispatchAction = (action: AnyAction): void => {\n    if (this._reduxStore) {\n      this._reduxStore.dispatch(action);\n    } else {\n      this._actionQueue.push(action);\n    }\n  };\n\n  private handleAcquireTokenSuccess = (response: AuthResponse): void => {\n    this.setAccountInfo(response);\n\n    if (response.tokenType === TokenType.IdToken) {\n      const token = new IdTokenResponse(response);\n      this.dispatchAction(AuthenticationActionCreators.acquireIdTokenSuccess(token));\n    } else if (response.tokenType === TokenType.AccessToken) {\n      const token = new AccessTokenResponse(response);\n      this.dispatchAction(AuthenticationActionCreators.acquireAccessTokenSuccess(token));\n    }\n  };\n\n  private handleLoginFailed = (): void => {\n    const error = this.getError();\n    if (error) {\n      this.dispatchAction(AuthenticationActionCreators.loginFailed());\n    }\n  };\n\n  private handleLoginSuccess = (): void => {\n    const account = this.getAccountInfo();\n    if (account) {\n      this.dispatchAction(AuthenticationActionCreators.loginSuccessful(account));\n    }\n  };\n}\n"],"file":"MsalAuthProvider.js"}