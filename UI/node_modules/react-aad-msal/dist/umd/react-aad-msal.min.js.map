{"version":3,"sources":["webpack://react-aad-msal/webpack/universalModuleDefinition","webpack://react-aad-msal/webpack/bootstrap","webpack://react-aad-msal/external \"react\"","webpack://react-aad-msal/external \"msal\"","webpack://react-aad-msal/./src/interfaces/index.ts","webpack://react-aad-msal/./src/enums/AuthenticationActions.ts","webpack://react-aad-msal/./src/enums/AuthenticationState.ts","webpack://react-aad-msal/./src/enums/LoginType.ts","webpack://react-aad-msal/./src/enums/TokenType.ts","webpack://react-aad-msal/./src/AccessTokenResponse.ts","webpack://react-aad-msal/./src/IdTokenResponse.ts","webpack://react-aad-msal/./src/AuthenticationActionCreators.ts","webpack://react-aad-msal/./src/Logger.ts","webpack://react-aad-msal/./src/MsalAuthProvider.ts","webpack://react-aad-msal/./src/components/AzureAD.tsx","webpack://react-aad-msal/./src/components/withAuthentication.tsx","webpack://react-aad-msal/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AuthenticationActions","AuthenticationState","LoginType","TokenType","AccessTokenResponse","response","tokenType","AccessToken","Error","this","accessToken","expiresOn","scopes","state","accountState","IdTokenResponse","IdToken","idToken","AuthenticationActionCreators","type","Initializing","Initialized","data","payload","LoginSuccess","LoginFailed","error","LoginError","ClearError","LogoutSuccess","token","AcquiredIdTokenSuccess","AcquiredIdTokenError","AcquiredAccessTokenSuccess","AcquiredAccessTokenError","AuthenticatedStateChanged","Logger","message","optionalParams","console","log","concat","info","warn","MsalAuthProvider","config","parameters","options","loginType","Popup","tokenRefreshUri","location","origin","Set","params","getAuthenticationParameters","getError","errorCode","setError","providerOptions","getProviderOptions","Redirect","setAuthenticationState","InProgress","loginRedirect","ERROR","Unauthenticated","loginPopup","processLogin","dispatchAction","logoutSuccessful","_accountInfo","refreshParams","redirectUri","extraQueryParameters","domain_hint","acquireTokenSilent","handleAcquireTokenSuccess","Authenticated","loginParams","acquireAccessTokenError","loginToRefreshToken","getCurrentConfiguration","clientId","auth","account","getAccount","loginHint","userName","acquireIdTokenError","_parameters","_error","_options","handleRedirectCallback","authenticationRedirectCallback","store","_reduxStore","_actionQueue","length","action","shift","listener","_onAuthenticationStateHandlers","add","authenticationState","_onAccountInfoHandlers","_onErrorHandlers","loginError","forEach","InteractionRequiredAuthError","acquireTokenRedirect","Promise","resolve","acquireTokenPopup","initializing","initialized","handleLoginFailed","getIdToken","handleLoginSuccess","ClientAuthError","getLoginInProgress","authenticatedStateChanged","accountInfo","getAccountInfo","jwtIdToken","rawIdToken","jwtAccessToken","dispatch","push","setAccountInfo","acquireIdTokenSuccess","acquireAccessTokenSuccess","loginFailed","loginSuccessful","UserAgentApplication","setAuthenticationParameters","setProviderOptions","initializeProvider","AzureAD","props","authenticatedFunction","unauthenticatedFunction","provider","forceLogin","accountInfoCallback","useState","_setAccountInfo","_setAuthenticationState","_setError","useEffect","registerAuthenticationStateHandler","registerAcountInfoHandler","onAccountInfoChanged","registerErrorHandler","reduxStore","registerReduxStore","login","unregisterAuthenticationStateHandler","unregisterAccountInfoHandler","unregisterErrorHandler","useCallback","logout","newState","newError","newAccountInfo","childrenFunctionProps","useMemo","getChildrenOrFunction","children","childrenProps","isChildrenFunction","authFunctionResult","displayName","withAuthentication","WrappedComponent","propParams"],"mappings":"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","file":"react-aad-msal.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"msal\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"react-aad-msal\", [\"react\", \"msal\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-aad-msal\"] = factory(require(\"react\"), require(\"msal\"));\n\telse\n\t\troot[\"react-aad-msal\"] = factory(root[\"react\"], root[\"msal\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","export * from './IAccountInfo';\nexport * from './IAuthProvider';\nexport * from './IMsalAuthProviderConfig';\n","export enum AuthenticationActions {\n  Initializing = 'AAD_INITIALIZING',\n  Initialized = 'AAD_INITIALIZED',\n  LoginSuccess = 'AAD_LOGIN_SUCCESS',\n  LoginFailed = 'AAD_LOGIN_FAILED',\n  LoginError = 'AAD_LOGIN_ERROR',\n  ClearError = 'AAD_CLEAR_ERROR',\n  LogoutSuccess = 'AAD_LOGOUT_SUCCESS',\n  AcquiredIdTokenSuccess = 'AAD_ACQUIRED_ID_TOKEN_SUCCESS',\n  AcquiredIdTokenError = 'AAD_ACQUIRED_ID_TOKEN_ERROR',\n  AcquiredAccessTokenSuccess = 'AAD_ACQUIRED_ACCESS_TOKEN_SUCCESS',\n  AcquiredAccessTokenError = 'AAD_ACQUIRED_ACCESS_TOKEN_ERROR',\n  AuthenticatedStateChanged = 'AAD_AUTHENTICATED_STATE_CHANGED',\n}\n","export enum AuthenticationState {\n  Unauthenticated = 'Unauthenticated',\n  InProgress = 'InProgress',\n  Authenticated = 'Authenticated',\n}\n","export enum LoginType {\n  Popup,\n  Redirect,\n}\n","export enum TokenType {\n  IdToken = 'id_token',\n  AccessToken = 'access_token',\n}\n","import { AuthResponse } from 'msal';\n\nimport { TokenType } from './enums';\n\nexport class AccessTokenResponse {\n  public accessToken = '';\n  public scopes: string[] = [];\n  public expiresOn: Date;\n  public state = '';\n\n  constructor(response: AuthResponse) {\n    if (response.tokenType !== TokenType.AccessToken) {\n      throw new Error(\n        `Can't construct an AccessTokenResponse from a AuthResponse that has a token type of \"${response.tokenType}\".`,\n      );\n    }\n\n    this.accessToken = response.accessToken;\n    this.expiresOn = response.expiresOn;\n    this.scopes = response.scopes;\n    this.state = response.accountState;\n  }\n}\n","import { AuthResponse } from 'msal';\nimport { IdToken } from 'msal/lib-commonjs/IdToken';\n\nimport { TokenType } from './enums';\n\nexport class IdTokenResponse {\n  public idToken: IdToken;\n  public state = '';\n\n  constructor(response: AuthResponse) {\n    if (response.tokenType !== TokenType.IdToken) {\n      throw new Error(\n        `Can't construct an IdTokenResponse from a AuthResponse that has a token type of \"${response.tokenType}\".`,\n      );\n    }\n\n    this.idToken = response.idToken;\n    this.state = response.accountState;\n  }\n}\n","import { AuthError } from 'msal';\nimport { AnyAction } from 'redux';\nimport { AccessTokenResponse } from './AccessTokenResponse';\nimport { IdTokenResponse } from './IdTokenResponse';\nimport { IAccountInfo } from './interfaces';\nimport { AuthenticationActions, AuthenticationState } from './enums';\n\nexport abstract class AuthenticationActionCreators {\n  public static initializing = (): AnyAction => ({\n    type: AuthenticationActions.Initializing,\n  });\n\n  public static initialized = (): AnyAction => ({\n    type: AuthenticationActions.Initialized,\n  });\n\n  public static loginSuccessful = (data: IAccountInfo): AnyAction => ({\n    payload: data,\n    type: AuthenticationActions.LoginSuccess,\n  });\n\n  public static loginFailed = (): AnyAction => ({\n    type: AuthenticationActions.LoginFailed,\n  });\n\n  public static loginError = (error: AuthError): AnyAction => ({\n    payload: error,\n    type: AuthenticationActions.LoginError,\n  });\n\n  public static clearError = (): AnyAction => ({\n    type: AuthenticationActions.ClearError,\n  });\n\n  public static logoutSuccessful = (): AnyAction => ({\n    type: AuthenticationActions.LogoutSuccess,\n  });\n\n  public static acquireIdTokenSuccess = (token: IdTokenResponse): AnyAction => ({\n    payload: token,\n    type: AuthenticationActions.AcquiredIdTokenSuccess,\n  });\n\n  public static acquireIdTokenError = (error: AuthError): AnyAction => ({\n    payload: error,\n    type: AuthenticationActions.AcquiredIdTokenError,\n  });\n\n  public static acquireAccessTokenSuccess = (token: AccessTokenResponse): AnyAction => ({\n    payload: token,\n    type: AuthenticationActions.AcquiredAccessTokenSuccess,\n  });\n\n  public static acquireAccessTokenError = (error: AuthError): AnyAction => ({\n    payload: error,\n    type: AuthenticationActions.AcquiredAccessTokenError,\n  });\n\n  public static authenticatedStateChanged = (state: AuthenticationState): AnyAction => ({\n    payload: state,\n    type: AuthenticationActions.AuthenticatedStateChanged,\n  });\n}\n","export class Logger {\n  public static VERBOSE(message: string, ...optionalParams: any[]) {\n    // eslint-disable-next-line no-console\n    console.log(...['[VERBOSE] ' + message].concat(optionalParams));\n  }\n\n  public static INFO(message: string, ...optionalParams: any[]) {\n    // eslint-disable-next-line no-console\n    console.info(...['[INFO] ' + message].concat(optionalParams));\n  }\n\n  public static WARN(message: string, ...optionalParams: any[]) {\n    // eslint-disable-next-line no-console\n    console.warn(...['[WARN] ' + message].concat(optionalParams));\n  }\n\n  public static ERROR(message: string, ...optionalParams: any[]) {\n    // eslint-disable-next-line no-console\n    console.error(...['[ERROR] ' + message].concat(optionalParams));\n  }\n}\n","import {\n  AuthenticationParameters,\n  AuthError,\n  AuthResponse,\n  ClientAuthError,\n  Configuration,\n  InteractionRequiredAuthError,\n  UserAgentApplication,\n} from 'msal';\nimport { AnyAction, Store } from 'redux';\n\nimport { AccessTokenResponse } from './AccessTokenResponse';\nimport { AuthenticationActionCreators } from './AuthenticationActionCreators';\nimport { IdTokenResponse } from './IdTokenResponse';\nimport { IAccountInfo, IAuthProvider, IMsalAuthProviderConfig } from './interfaces';\nimport { Logger } from './Logger';\nimport { AuthenticationState, LoginType, TokenType } from './enums';\n\ntype AuthenticationStateHandler = (state: AuthenticationState) => void;\ntype ErrorHandler = (error: AuthError | null) => void;\ntype AccountInfoHandlers = (accountInfo: IAccountInfo | null) => void;\n\nexport class MsalAuthProvider extends UserAgentApplication implements IAuthProvider {\n  public authenticationState: AuthenticationState;\n\n  /**\n   * Gives access to the MSAL functionality for advanced usage.\n   *\n   * @deprecated The MsalAuthProvider class itself extends from UserAgentApplication and has the same functionality\n   */\n  public UserAgentApplication: UserAgentApplication;\n\n  protected _reduxStore: Store;\n  protected _parameters: AuthenticationParameters;\n  protected _options: IMsalAuthProviderConfig;\n  protected _accountInfo: IAccountInfo | null;\n  protected _error: AuthError | null;\n\n  private _onAuthenticationStateHandlers = new Set<AuthenticationStateHandler>();\n  private _onAccountInfoHandlers = new Set<AccountInfoHandlers>();\n  private _onErrorHandlers = new Set<ErrorHandler>();\n  private _actionQueue: AnyAction[] = [];\n\n  constructor(\n    config: Configuration,\n    parameters: AuthenticationParameters,\n    options: IMsalAuthProviderConfig = {\n      loginType: LoginType.Popup,\n      tokenRefreshUri: window.location.origin,\n    },\n  ) {\n    super(config);\n\n    // Required only for backward compatibility\n    this.UserAgentApplication = this as UserAgentApplication;\n\n    this.setAuthenticationParameters(parameters);\n    this.setProviderOptions(options);\n\n    this.initializeProvider();\n  }\n\n  public login = async (parameters?: AuthenticationParameters) => {\n    const params = parameters || this.getAuthenticationParameters();\n\n    // Clear any active authentication errors unless the code is executing from within\n    // the token renewal iframe\n    const error = this.getError();\n    if (error && error.errorCode !== 'block_token_requests') {\n      this.setError(null);\n    }\n\n    const providerOptions = this.getProviderOptions();\n    if (providerOptions.loginType === LoginType.Redirect) {\n      this.setAuthenticationState(AuthenticationState.InProgress);\n      try {\n        this.loginRedirect(params);\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n    } else if (providerOptions.loginType === LoginType.Popup) {\n      try {\n        this.setAuthenticationState(AuthenticationState.InProgress);\n        await this.loginPopup(params);\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n\n      await this.processLogin();\n    }\n  };\n\n  public logout = (): void => {\n    super.logout();\n\n    this.dispatchAction(AuthenticationActionCreators.logoutSuccessful());\n  };\n\n  public getAccountInfo = (): IAccountInfo | null => {\n    return this._accountInfo ? { ...this._accountInfo } : null;\n  };\n\n  public getAccessToken = async (parameters?: AuthenticationParameters): Promise<AccessTokenResponse> => {\n    const providerOptions = this.getProviderOptions();\n\n    // The parameters to be used when silently refreshing the token\n    const refreshParams = {\n      ...(parameters || this.getAuthenticationParameters()),\n      // Use the redirectUri that was passed, otherwise use the configured tokenRefreshUri\n      redirectUri: (parameters && parameters.redirectUri) || providerOptions.tokenRefreshUri,\n    };\n\n    /* In this library, acquireTokenSilent is being called only when there is an accountInfo of an expired session.\n        *  In a scenario where user interaction is required, username from the account info is passed as 'login_hint'\n        *  parameter which redirects user to user's organization login page. So 'domain_hint' is not required to be\n        *  passed for silent calls. Hence, the below code is to avoid sending domain_hint. This also solves the issue\n        *  of multiple domain_hint param being added by the MSAL.js.\n    */\n    if (refreshParams.extraQueryParameters && refreshParams.extraQueryParameters.domain_hint) {\n      delete refreshParams.extraQueryParameters.domain_hint;\n    }\n\n    try {\n      const response = await this.acquireTokenSilent(refreshParams);\n\n      this.handleAcquireTokenSuccess(response);\n      this.setAuthenticationState(AuthenticationState.Authenticated);\n\n      return new AccessTokenResponse(response);\n    } catch (error) {\n      // The parameters to be used if silent refresh failed, and a new login needs to be initiated\n      const loginParams = {\n        ...(parameters || this.getAuthenticationParameters()),\n      };\n\n      this.dispatchAction(AuthenticationActionCreators.acquireAccessTokenError(error));\n      const response = await this.loginToRefreshToken(error, loginParams);\n\n      return new AccessTokenResponse(response);\n    }\n  };\n\n  public getIdToken = async (parameters?: AuthenticationParameters): Promise<IdTokenResponse> => {\n    const providerOptions = this.getProviderOptions();\n    const config = this.getCurrentConfiguration();\n    const clientId = config.auth.clientId;\n\n    // The parameters to be used when silently refreshing the token\n    const refreshParams = {\n      ...(parameters || this.getAuthenticationParameters()),\n      // Use the redirectUri that was passed, otherwise use the configured tokenRefreshUri\n      redirectUri: (parameters && parameters.redirectUri) || providerOptions.tokenRefreshUri,\n      // Pass the clientId as the only scope to get a renewed IdToken if it has expired\n      scopes: [clientId],\n    };\n\n    /* In this library, acquireTokenSilent is being called only when there is an accountInfo of an expired session.\n        *  In a scenario where user interaction is required, username from the account info is passed as 'login_hint'\n        *  parameter which redirects user to user's organization login page. So 'domain_hint' is not required to be\n        *  passed for silent calls. Hence, the below code is to avoid sending domain_hint. This also solves the issue\n        *  of multiple domain_hint param being added by the MSAL.js.\n    */\n    if (refreshParams.extraQueryParameters && refreshParams.extraQueryParameters.domain_hint) {\n      delete refreshParams.extraQueryParameters.domain_hint;\n    }\n\n    try {\n      const response = await this.acquireTokenSilent(refreshParams);\n\n      this.handleAcquireTokenSuccess(response);\n      this.setAuthenticationState(AuthenticationState.Authenticated);\n\n      return new IdTokenResponse(response);\n    } catch (error) {\n      // The parameters to be used if silent refresh failed, and a new login needs to be initiated\n      const loginParams = {\n        ...(parameters || this.getAuthenticationParameters()),\n      };\n\n      // If the parameters do not specify a login hint and the user already has a session cached,\n      // prefer the cached user name to bypass the account selection process if possible\n      const account = this.getAccount();\n      if (account && (!parameters || !parameters.loginHint)) {\n        loginParams.loginHint = account.userName;\n      }\n\n      this.dispatchAction(AuthenticationActionCreators.acquireIdTokenError(error));\n      const response = await this.loginToRefreshToken(error, loginParams);\n\n      return new IdTokenResponse(response);\n    }\n  };\n\n  public getAuthenticationParameters = (): AuthenticationParameters => {\n    return { ...this._parameters };\n  };\n\n  public getError = () => {\n    return this._error ? { ...this._error } : null;\n  };\n\n  public setAuthenticationParameters = (parameters: AuthenticationParameters): void => {\n    this._parameters = { ...parameters };\n  };\n\n  public getProviderOptions = (): IMsalAuthProviderConfig => {\n    return { ...this._options };\n  };\n\n  public setProviderOptions = (options: IMsalAuthProviderConfig) => {\n    this._options = { ...options };\n    if (options.loginType === LoginType.Redirect) {\n      this.handleRedirectCallback(this.authenticationRedirectCallback);\n    }\n  };\n\n  public registerReduxStore = (store: Store): void => {\n    this._reduxStore = store;\n    while (this._actionQueue.length) {\n      const action = this._actionQueue.shift();\n      if (action) {\n        this.dispatchAction(action);\n      }\n    }\n  };\n\n  public registerAuthenticationStateHandler = (listener: AuthenticationStateHandler) => {\n    this._onAuthenticationStateHandlers.add(listener);\n    listener(this.authenticationState);\n  };\n\n  public unregisterAuthenticationStateHandler = (listener: AuthenticationStateHandler) => {\n    this._onAuthenticationStateHandlers.delete(listener);\n  };\n\n  public registerAcountInfoHandler = (listener: AccountInfoHandlers) => {\n    this._onAccountInfoHandlers.add(listener);\n    listener(this._accountInfo);\n  };\n\n  public unregisterAccountInfoHandler = (listener: AccountInfoHandlers) => {\n    this._onAccountInfoHandlers.delete(listener);\n  };\n\n  public registerErrorHandler = (listener: ErrorHandler) => {\n    this._onErrorHandlers.add(listener);\n    listener(this._error);\n  };\n\n  public unregisterErrorHandler = (listener: ErrorHandler) => {\n    this._onErrorHandlers.delete(listener);\n  };\n\n  private setError = (error: AuthError | null) => {\n    this._error = error ? { ...error } : null;\n\n    if (error) {\n      this.dispatchAction(AuthenticationActionCreators.loginError(error));\n    }\n\n    this._onErrorHandlers.forEach(listener => listener(this._error));\n\n    return { ...this._error };\n  };\n\n  private loginToRefreshToken = async (\n    error: AuthError,\n    parameters?: AuthenticationParameters,\n  ): Promise<AuthResponse> => {\n    const providerOptions = this.getProviderOptions();\n    const params = parameters || this.getAuthenticationParameters();\n\n    if (error instanceof InteractionRequiredAuthError) {\n      if (providerOptions.loginType === LoginType.Redirect) {\n        this.acquireTokenRedirect(params);\n\n        // Nothing to return, the user is redirected to the login page\n        return new Promise<AuthResponse>(resolve => resolve());\n      }\n\n      try {\n        const response = await this.acquireTokenPopup(params);\n        this.handleAcquireTokenSuccess(response);\n        this.setAuthenticationState(AuthenticationState.Authenticated);\n        return response;\n      } catch (error) {\n        Logger.ERROR(error);\n\n        this.setError(error);\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n\n        throw error;\n      }\n    } else {\n      Logger.ERROR(error as any);\n\n      this.setError(error);\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n\n      throw error;\n    }\n  };\n\n  private authenticationRedirectCallback = (error: AuthError) => {\n    if (error) {\n      this.setError(error);\n    }\n    this.processLogin();\n  };\n\n  private initializeProvider = async () => {\n    this.dispatchAction(AuthenticationActionCreators.initializing());\n\n    await this.processLogin();\n\n    this.dispatchAction(AuthenticationActionCreators.initialized());\n  };\n\n  private processLogin = async () => {\n    if (this.getError()) {\n      this.handleLoginFailed();\n\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n    } else if (this.getAccount()) {\n      try {\n        // If the IdToken has expired, refresh it. Otherwise use the cached token\n        await this.getIdToken();\n\n        this.handleLoginSuccess();\n      } catch (error) {\n        // Swallow the error if the user isn't authenticated, just set to Unauthenticated\n        if (!(error instanceof ClientAuthError && error.errorCode === 'user_login_error')) {\n          Logger.ERROR(error);\n          this.setError(error);\n        }\n\n        this.setAuthenticationState(AuthenticationState.Unauthenticated);\n      }\n    } else if (this.getLoginInProgress()) {\n      this.setAuthenticationState(AuthenticationState.InProgress);\n    } else {\n      this.setAuthenticationState(AuthenticationState.Unauthenticated);\n    }\n  };\n\n  private setAuthenticationState = (state: AuthenticationState): AuthenticationState => {\n    if (this.authenticationState !== state) {\n      this.authenticationState = state;\n\n      this.dispatchAction(AuthenticationActionCreators.authenticatedStateChanged(state));\n      this._onAuthenticationStateHandlers.forEach(listener => listener(state));\n    }\n\n    return this.authenticationState;\n  };\n\n  private setAccountInfo = (response: AuthResponse): IAccountInfo => {\n    const accountInfo: IAccountInfo = this.getAccountInfo() || ({ account: response.account } as IAccountInfo);\n\n    // Depending on the token type of the auth response, update the correct property\n    if (response.tokenType === TokenType.IdToken) {\n      accountInfo.jwtIdToken = response.idToken.rawIdToken;\n    } else if (response.tokenType === TokenType.AccessToken) {\n      accountInfo.jwtAccessToken = response.accessToken;\n    }\n\n    this._accountInfo = { ...accountInfo };\n    this._onAccountInfoHandlers.forEach(listener => listener(this._accountInfo));\n\n    return { ...this._accountInfo };\n  };\n\n  private dispatchAction = (action: AnyAction): void => {\n    if (this._reduxStore) {\n      this._reduxStore.dispatch(action);\n    } else {\n      this._actionQueue.push(action);\n    }\n  };\n\n  private handleAcquireTokenSuccess = (response: AuthResponse): void => {\n    this.setAccountInfo(response);\n\n    if (response.tokenType === TokenType.IdToken) {\n      const token = new IdTokenResponse(response);\n      this.dispatchAction(AuthenticationActionCreators.acquireIdTokenSuccess(token));\n    } else if (response.tokenType === TokenType.AccessToken) {\n      const token = new AccessTokenResponse(response);\n      this.dispatchAction(AuthenticationActionCreators.acquireAccessTokenSuccess(token));\n    }\n  };\n\n  private handleLoginFailed = (): void => {\n    const error = this.getError();\n    if (error) {\n      this.dispatchAction(AuthenticationActionCreators.loginFailed());\n    }\n  };\n\n  private handleLoginSuccess = (): void => {\n    const account = this.getAccountInfo();\n    if (account) {\n      this.dispatchAction(AuthenticationActionCreators.loginSuccessful(account));\n    }\n  };\n}\n","import { default as React, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Store } from 'redux';\n\nimport { AuthError } from 'msal';\nimport { MsalAuthProvider } from '..';\nimport { IAccountInfo } from '../interfaces';\nimport { AuthenticationState } from '../enums';\n\ntype AccountInfoCallback = (token: IAccountInfo) => void;\ntype UnauthenticatedFunction = (login: LoginFunction) => JSX.Element;\ntype AuthenticatedFunction = (logout: LogoutFunction) => JSX.Element;\ntype LoginFunction = () => void;\ntype LogoutFunction = () => void;\n\nexport interface IAzureADFunctionProps {\n  login: LoginFunction;\n  logout: LogoutFunction;\n  authenticationState: AuthenticationState;\n  accountInfo: IAccountInfo | null;\n  error: AuthError | null;\n}\n\nexport interface IAzureADProps {\n  provider: MsalAuthProvider;\n  unauthenticatedFunction?: UnauthenticatedFunction;\n  authenticatedFunction?: AuthenticatedFunction;\n  accountInfoCallback?: AccountInfoCallback;\n  reduxStore?: Store;\n  forceLogin?: boolean;\n}\n\nexport const AzureAD: React.FunctionComponent<IAzureADProps> = props => {\n  const { authenticatedFunction, unauthenticatedFunction, provider, forceLogin, accountInfoCallback } = props;\n  const [accountInfo, _setAccountInfo] = useState(provider.getAccountInfo());\n  const [authenticationState, _setAuthenticationState] = useState(provider.authenticationState);\n  const [error, _setError] = useState(provider.getError());\n\n  // On component mounted\n  useEffect(() => {\n    provider.registerAuthenticationStateHandler(setAuthenticationState);\n    provider.registerAcountInfoHandler(onAccountInfoChanged);\n    provider.registerErrorHandler(setError);\n\n    if (props.reduxStore) {\n      provider.registerReduxStore(props.reduxStore);\n    }\n\n    if (forceLogin && authenticationState === AuthenticationState.Unauthenticated && !error) {\n      login();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      provider.unregisterAuthenticationStateHandler(setAuthenticationState);\n      provider.unregisterAccountInfoHandler(onAccountInfoChanged);\n      provider.unregisterErrorHandler(setError);\n    };\n  }, [authenticationState, accountInfo, error]);\n\n  const login = useCallback(() => {\n    provider.login();\n  }, [provider]);\n\n  const logout = useCallback(() => {\n    if (authenticationState !== AuthenticationState.Authenticated) {\n      return;\n    }\n    provider.logout();\n  }, [authenticationState, provider]);\n\n  const setAuthenticationState = useCallback(\n    (newState: AuthenticationState) => {\n      if (newState !== authenticationState) {\n        _setAuthenticationState(newState);\n\n        if (newState === AuthenticationState.Unauthenticated && forceLogin && !error) {\n          login();\n        }\n      }\n    },\n    [authenticationState, forceLogin, error],\n  );\n\n  const setError = useCallback(\n    (newError: AuthError) => {\n      if (newError !== error) {\n        _setError(newError);\n      }\n    },\n    [error],\n  );\n\n  const onAccountInfoChanged = useCallback(\n    (newAccountInfo: IAccountInfo) => {\n      _setAccountInfo(newAccountInfo);\n\n      if (accountInfoCallback) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Warning! The accountInfoCallback callback has been deprecated and will be removed in a future release.',\n        );\n        accountInfoCallback(newAccountInfo);\n      }\n    },\n    [accountInfoCallback],\n  );\n\n  // The authentication data to be passed to the children() if it's a function\n  const childrenFunctionProps = useMemo<IAzureADFunctionProps>(\n    () => ({\n      accountInfo,\n      authenticationState,\n      error,\n      login,\n      logout,\n    }),\n    [accountInfo, authenticationState, error, login, logout],\n  );\n\n  /**\n   * @param children\n   * @param childrenProps\n   */\n  function getChildrenOrFunction(children: any, childrenProps: IAzureADFunctionProps) {\n    if (children) {\n      // tslint:disable-next-line: triple-equals\n      if (isChildrenFunction(children)) {\n        return (children as (props: IAzureADFunctionProps) => {})(childrenProps);\n      } else {\n        return children;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @param children\n   */\n  function isChildrenFunction(children: any) {\n    return typeof children == 'function' || false;\n  }\n\n  // Render logic\n  switch (authenticationState) {\n    case AuthenticationState.Authenticated:\n      if (authenticatedFunction) {\n        const authFunctionResult = authenticatedFunction(logout);\n\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Warning! The authenticatedFunction callback has been deprecated and will be removed in a future release.',\n        );\n\n        if (authFunctionResult) {\n          return authFunctionResult;\n        }\n      }\n\n      // If there is no authenticatedFunction, or it returned null, render the children\n      return getChildrenOrFunction(props.children, childrenFunctionProps);\n    case AuthenticationState.Unauthenticated:\n      if (unauthenticatedFunction) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Warning! The unauthenticatedFunction callback has been deprecated and will be removed in a future release.',\n        );\n        return unauthenticatedFunction(login) || null;\n      }\n\n    // If state is Uauthenticated or InProgress, only return the children if it's a function\n    // If the children prop is a function, we will pass state changes to be handled by the consumer\n    // eslint-disable-next-line no-fallthrough\n    case AuthenticationState.InProgress:\n      if (isChildrenFunction(props.children)) {\n        return getChildrenOrFunction(props.children, childrenFunctionProps);\n      }\n      return null;\n    default:\n      return null;\n  }\n};\n\nAzureAD.displayName = 'AzureAD';\n","import * as React from 'react';\n\nimport { AzureAD, IAzureADProps } from './AzureAD';\n\nexport const withAuthentication = <P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  parameters: IAzureADProps,\n): React.FunctionComponent<P> => {\n  // tslint:disable-next-line: no-shadowed-variable\n  const withAuthentication: React.FunctionComponent = (props: any) => {\n    const propParams: IAzureADProps = { forceLogin: true, ...parameters };\n\n    withAuthentication.displayName = `withAuthentication(${WrappedComponent.displayName || WrappedComponent.name}`;\n    return (\n      <AzureAD {...propParams}>\n        <WrappedComponent {...props} />\n      </AzureAD>\n    );\n  };\n\n  return withAuthentication;\n};\n","export { IAccountInfo, IMsalAuthProviderConfig } from './interfaces';\nexport { AuthenticationActions, AuthenticationState, LoginType } from './enums';\n\nexport { AccessTokenResponse } from './AccessTokenResponse';\nexport { IdTokenResponse } from './IdTokenResponse';\nexport { MsalAuthProvider } from './MsalAuthProvider';\nexport { AuthenticationActionCreators } from './AuthenticationActionCreators';\n\nimport { AzureAD } from './components/AzureAD';\nexport * from './components/AzureAD';\nexport { withAuthentication } from './components/withAuthentication';\n\nexport default AzureAD;\n"],"sourceRoot":""}