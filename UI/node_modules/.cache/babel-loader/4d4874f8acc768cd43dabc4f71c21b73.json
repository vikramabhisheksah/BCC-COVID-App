{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdTokenResponse = void 0;\n\nvar _enums = require(\"./enums\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar IdTokenResponse = function IdTokenResponse(response) {\n  _classCallCheck(this, IdTokenResponse);\n\n  _defineProperty(this, \"idToken\", void 0);\n\n  _defineProperty(this, \"state\", '');\n\n  if (response.tokenType !== _enums.TokenType.IdToken) {\n    throw new Error(\"Can't construct an IdTokenResponse from a AuthResponse that has a token type of \\\"\".concat(response.tokenType, \"\\\".\"));\n  }\n\n  this.idToken = response.idToken;\n  this.state = response.accountState;\n};\n\nexports.IdTokenResponse = IdTokenResponse;","map":{"version":3,"sources":["../../src/IdTokenResponse.ts"],"names":["IdTokenResponse","response","TokenType"],"mappings":";;;;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;IAEaA,e,GAIX,SAAA,eAAA,CAAA,QAAA,EAAoC;AAAA,EAAA,eAAA,CAAA,IAAA,EAAA,eAAA,CAAA;;AAAA,EAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,EAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAFrB,EAEqB,CAAA;;AAClC,MAAIC,QAAQ,CAARA,SAAAA,KAAuBC,MAAAA,CAAAA,SAAAA,CAA3B,OAAA,EAA8C;AAC5C,UAAM,IAAA,KAAA,CAAA,qFAAA,MAAA,CACgFD,QAAQ,CADxF,SAAA,EAAN,KAAM,CAAA,CAAN;AAGD;;AAED,OAAA,OAAA,GAAeA,QAAQ,CAAvB,OAAA;AACA,OAAA,KAAA,GAAaA,QAAQ,CAArB,YAAA","sourcesContent":["import { AuthResponse } from 'msal';\nimport { IdToken } from 'msal/lib-commonjs/IdToken';\n\nimport { TokenType } from './enums';\n\nexport class IdTokenResponse {\n  public idToken: IdToken;\n  public state = '';\n\n  constructor(response: AuthResponse) {\n    if (response.tokenType !== TokenType.IdToken) {\n      throw new Error(\n        `Can't construct an IdTokenResponse from a AuthResponse that has a token type of \"${response.tokenType}\".`,\n      );\n    }\n\n    this.idToken = response.idToken;\n    this.state = response.accountState;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}