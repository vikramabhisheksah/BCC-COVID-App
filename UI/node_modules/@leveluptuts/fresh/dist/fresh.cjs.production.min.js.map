{"version":3,"file":"fresh.cjs.production.min.js","sources":["../src/state/immer.ts","../src/state/formState.ts","../src/form/CancelButton.tsx","../src/form/Tooltip.tsx","../src/fields/Select.tsx","../src/fields/Reference.tsx","../src/fields/Password.tsx","../src/fields/Tags.tsx","../src/fields/TextArea.tsx","../src/fields/Number.tsx","../src/fields/Markdown.tsx","../src/fields/Text.tsx","../src/fields/Toggle.tsx","../src/Field.tsx","../src/index.tsx"],"sourcesContent":["import produce from 'immer'\n\nexport const immer = (config) => (set, get) =>\n  config((fn) => set(produce(fn)), get)\n","import React from 'react'\nimport create from 'zustand'\nimport { immer } from './immer'\n\n// Woof on theses types.\n// TODO fix these types\nconst store = (set: (val: any) => any) => ({\n  data: {},\n  isReady: {},\n  defaultValues: {},\n  setForm: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n    }),\n  setField: (id: string, value: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][id] = value\n    }),\n  setDefaults: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.defaultValues[formId] = { ...formData }\n    }),\n  register: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n      state.defaultValues[formId] = { ...formData }\n      state.isReady[formId] = true\n    }),\n  unregister: (formId: string) =>\n    set((state: any) => {\n      state.isReady[formId] = false\n    }),\n  registerField: (fieldId: string, defaultValue: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][fieldId] = defaultValue\n    }),\n  resetForm: (formId: string) =>\n    set((state: any) => {\n      state.data[formId] = state.defaultValues[formId]\n    }),\n})\n\nexport const useForm = create(immer(store))\n\nexport const FormContext = React.createContext(null)\n","import React from 'react'\nimport { useForm } from '../state/formState'\n\nconst CancelButton = ({\n  cancelAction,\n  cancelText = 'Cancel',\n  formId,\n}: Props) => {\n  const { data, setField, isReady, resetForm } = useForm()\n  return (\n    <button\n      id=\"fresh-cancel\"\n      className=\"fresh-button fresh-cancel\"\n      onClick={() => {\n        cancelAction(formId)\n        resetForm(formId)\n      }}\n      type=\"reset\"\n    >\n      {cancelText}\n    </button>\n  )\n}\n\ntype Props = {\n  cancelAction: (resetForm) => void\n  cancelText: string\n  formId: string\n}\nexport default CancelButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\ninterface TooltipInterface {\n  tooltip: string\n  tooltipBackground: string\n  tooltipColor: string\n  tooltipIconColor: string\n}\n\nconst Tooltip = ({\n  tooltip,\n  tooltipBackground,\n  tooltipColor,\n  tooltipIconColor,\n}: TooltipInterface) => {\n  const tooltipStyle = {\n    '--fresh-tooltip-background': tooltipBackground,\n    '--fresh-tooltip-color': tooltipColor,\n    '--fresh-tooltip-icon-color': tooltipIconColor,\n  } as React.CSSProperties\n  return (\n    <span className=\"fresh-tooltip\" data-tooltip={tooltip} style={tooltipStyle}>\n      <svg\n        className=\"fresh-tooltip-icon\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM9.02539 5.91797H5.84668V7.79102H6.91309V11.127H5.84668V13H10.0098V11.127H9.02539V5.91797ZM6.89258 3.16309C6.83333 3.30892 6.80371 3.46615 6.80371 3.63477C6.80371 3.80339 6.83333 3.96289 6.89258 4.11328C6.95638 4.25911 7.04297 4.38672 7.15234 4.49609C7.26172 4.60547 7.38932 4.69206 7.53516 4.75586C7.68555 4.81966 7.84733 4.85156 8.02051 4.85156C8.18457 4.85156 8.33952 4.81966 8.48535 4.75586C8.63118 4.69206 8.75879 4.60547 8.86816 4.49609C8.97754 4.38672 9.06413 4.25911 9.12793 4.11328C9.19173 3.96289 9.22363 3.80339 9.22363 3.63477C9.22363 3.46615 9.19173 3.30892 9.12793 3.16309C9.06413 3.0127 8.97754 2.88281 8.86816 2.77344C8.75879 2.66406 8.63118 2.57747 8.48535 2.51367C8.33952 2.44987 8.18457 2.41797 8.02051 2.41797C7.84733 2.41797 7.68555 2.44987 7.53516 2.51367C7.38932 2.57747 7.26172 2.66406 7.15234 2.77344C7.04297 2.88281 6.95638 3.0127 6.89258 3.16309Z\"\n          fill={tooltipIconColor}\n        />\n      </svg>\n    </span>\n  )\n}\n\nTooltip.propTypes = {\n  tooltip: PropTypes.string,\n  tooltipBackground: PropTypes.string,\n  tooltipColor: PropTypes.string,\n  tooltipIconColor: PropTypes.string,\n}\n\nTooltip.defaultProps = {\n  tooltip: '',\n  tooltipBackground: '#eee',\n  tooltipColor: '#000',\n  tooltipIconColor: '#000',\n}\nexport default Tooltip\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Select = ({\n  options,\n  fieldId,\n  formId,\n  displayProperty = '',\n  valueProperty = '',\n  className = '',\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId]\n      ? defaultValues?.[formId]?.[fieldId]?.[valueProperty] ||\n        defaultValues?.[formId]?.[fieldId]\n      : options[0]\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <select\n      id={`fresh-${fieldId}-${formId}`}\n      className={`fresh-input fresh-input-select ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n      value={data[formId][fieldId]}\n    >\n      {options.map((option, i) => (\n        <option\n          value={option?.[valueProperty] || option}\n          key={`fresh-${fieldId}-${formId}-${i}`}\n          className=\"fresh-option\"\n        >\n          {option?.[displayProperty] || option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import React, { useState, useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Reference = ({\n  options,\n  fieldId,\n  keyProperty = 'id',\n  displayProperty,\n  placeholder = '',\n  className = '',\n  formId,\n}: FieldInterface) => {\n  const { data, setField, isReady, defaultValues, registerField } = useForm()\n  const [inputValue, setInputValue] = useState(defaultValues?.[formId]?.[fieldId]?.[displayProperty] || '')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  // If the form is not registered or there is not data object\n  if (!isReady) return null\n  return (\n    <>\n      <input\n        id={`fresh-${fieldId}-${formId}`}\n        onChange={e => setInputValue(e.target.value)}\n        value={inputValue}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        placeholder={placeholder}\n        type=\"text\"\n        className={`fresh-input fresh-input-reference ${className}`}\n      />\n      {isFocused && (\n        <div className=\"fresh-focused\">\n          {options\n            .filter(option =>\n              option[displayProperty]\n                .toLowerCase()\n                .includes(inputValue.toLowerCase())\n            )\n            .map(option => (\n              <div\n                key={option[keyProperty]}\n                style={{ padding: '0.75em' }}\n                onMouseDown={() => {\n                  setField(fieldId, option, formId)\n                  setInputValue(option[displayProperty])\n                }}\n              >\n                {option[displayProperty]}\n              </div>\n            ))}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Reference\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Password = ({\n  placeholder,\n  className = '',\n  required,\n  fieldId,\n  strength = true,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  // If the form is not registered or there is not data object\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  const strengthValue = calculateScore(data[formId][fieldId] ?? '')\n\n  let strengthMeter = {\n    background: '#ccc',\n    width: 'calc(193px * 0.25)',\n  }\n  if (strengthValue >= 2 && strengthValue < 3) {\n    strengthMeter = {\n      width: 'calc(193px * 0.5)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 3 && strengthValue < 4) {\n    strengthMeter = {\n      width: 'calc(193px * 0.75)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 4) {\n    strengthMeter = {\n      width: 'calc(193px * 1)',\n      background: 'green',\n    }\n  }\n  return (\n    <>\n      <input\n        className={`fresh-input fresh-input-password ${className}`}\n        placeholder={placeholder}\n        type={type}\n        required={required}\n        id={`fresh-${fieldId}-${formId}`}\n        value={data[formId][fieldId]}\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      {strength && (\n        <div\n          style={{\n            height: '4px',\n            marginBottom: '1rem',\n            transition: '0.3s ease all',\n            ...strengthMeter,\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nconst options = {\n  showText: true,\n  fieldPartialMatch: true,\n  minimumLength: 4,\n}\n\nfunction calculateScore(password: string) {\n  var score = 0\n\n  // password < options.minimumLength\n  if (password.length < options.minimumLength) {\n    return -1\n  }\n  // password length\n  score += password.length * 4\n\n  // password has 3 numbers\n  if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {\n    score += 5\n  }\n\n  // password has at least 2 sybols\n  var symbols: any = '.*[!,@,#,$,%,^,&,*,?,_,~]'\n  symbols = new RegExp('(' + symbols + symbols + ')')\n  if (password.match(symbols)) {\n    score += 5\n  }\n\n  // password has Upper and Lower chars\n  if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {\n    score += 10\n  }\n\n  // password has number and chars\n  if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {\n    score += 15\n  }\n\n  // password has number and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([0-9])/)\n  ) {\n    score += 15\n  }\n\n  // password has char and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([a-zA-Z])/)\n  ) {\n    score += 15\n  }\n\n  // password is just numbers or chars\n  if (password.match(/^\\w+$/) || password.match(/^\\d+$/)) {\n    score -= 10\n  }\n\n  if (score > 100) {\n    score = 100\n  }\n\n  if (score < 0) {\n    score = 0\n  }\n\n  return score * 0.04\n}\n\nexport default Password\n","import React, { useEffect } from 'react'\nimport TagsInput from 'react-tagsinput'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Tags = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? []\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <TagsInput\n      value={data[formId][fieldId] || []}\n      onChange={(value: string[]) => setField(fieldId, value, formId)}\n      className={`fresh-input-tags ${className}`}\n      id={`fresh-${fieldId}-${formId}`}\n      style={{\n        marginTop: '1rem',\n      }}\n    />\n  )\n}\n\nexport default Tags\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\n\ninterface RefValue {\n  id: string\n  text: string\n}\n\ntype Props = {\n  required?: boolean\n  children: string\n  type?: string\n  fieldId?: string\n  name?: string\n  label?: boolean\n  error?: string\n  placeholder?: string\n  options: any\n  className?: string\n  tooltip?: string\n  strength?: boolean\n  displayProperty?: string\n  formId: string\n}\n\nexport const TextArea: React.FC<Props> = ({\n  className,\n  fieldId,\n  formId,\n  placeholder,\n}) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <textarea\n      id={`fresh-${fieldId}-${formId}`}\n      placeholder={placeholder}\n      value={data[formId][fieldId]}\n      className={`fresh-input fresh-input-textarea ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default TextArea\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst NumberField = ({\n  fieldId,\n  placeholder,\n  required,\n  formId,\n  className,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-number ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type=\"number\"\n      value={data[formId][fieldId]}\n      onChange={e => {\n        const value = e.target.value ? parseInt(e.target.value) : null\n        setField(fieldId, value, formId)\n      }}\n    />\n  )\n}\n\nexport default NumberField\n","import React, { useEffect } from 'react'\nimport Markdown from 'markdown-to-jsx'\nimport { useForm } from '../state/formState'\n\nimport { FieldInterface } from './types'\n\nexport const MarkdownTextArea = ({\n  fieldId,\n  placeholder,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className=\"fresh-markdown-wrapper\">\n      <textarea\n        id={`fresh-${fieldId}`}\n        placeholder={placeholder}\n        value={data[formId][fieldId]}\n        className=\"fresh-input fresh-input-textarea\"\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      <div className=\"fresh-input fresh-input-markdown\">\n        <Markdown children={data[formId][fieldId] || ''} />\n      </div>\n    </div>\n  )\n}\n\nexport default MarkdownTextArea\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Text = ({\n  className,\n  fieldId,\n  placeholder,\n  required,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-${type} ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type={type}\n      value={data[formId][fieldId]}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default Text\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Toggle = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? false\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className={`${className} fresh-switch`}>\n      <input\n        checked={data[formId][fieldId] || false}\n        type=\"checkbox\"\n        id={`fresh-${fieldId}`}\n        className=\"fresh-input-toggle\"\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n      <span\n        className={`fresh-slider ${data[formId][fieldId] ? `on` : ''}`}\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n    </div>\n  )\n}\n\nexport default Toggle\n","import React, { useContext } from 'react'\nimport { FormContext } from './state/formState'\nimport { FieldInterface } from './fields/types'\nimport Tooltip from './form/Tooltip'\nimport Select from './fields/Select'\nimport Reference from './fields/Reference'\nimport Password from './fields/Password'\nimport Tags from './fields/Tags'\nimport TextArea from './fields/TextArea'\nimport NumberField from './fields/Number'\nimport Markdown from './fields/Markdown'\nimport Text from './fields/Text'\nimport Toggle from './fields/Toggle'\n\nconst camelCase = str => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return ''\n    return index == 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nconst Field = ({\n  required = false,\n  children,\n  name = '',\n  type = 'text',\n  label = true,\n  error,\n  placeholder = '',\n  options,\n  strength,\n  className = '',\n  defaultValue = '',\n  displayProperty = '',\n  valueProperty = '',\n  keyProperty = 'id',\n  tooltip,\n  readOnly = false,\n  wrapperStyle = {},\n}: FieldInterface) => {\n  const fieldId = name || camelCase(children)\n  const { formId } = useContext(FormContext)\n\n  const standardProps = {\n    children,\n    required,\n    name,\n    type,\n    label,\n    error,\n    placeholder,\n    options,\n    className,\n    defaultValue,\n    displayProperty,\n    readOnly,\n    formId,\n  }\n  return (\n    <div className={`fresh-field-wrapper ${fieldId}`} style={wrapperStyle}>\n      <label className=\"fresh-label\" htmlFor={`fresh-${fieldId}`}>\n        <span className=\"fresh-title\">\n          {required && '*'} {label && children}&nbsp;\n          {tooltip && <Tooltip tooltip={tooltip} />}\n        </span>\n        {(() => {\n          switch (type) {\n            case 'select':\n              return (\n                <Select\n                  fieldId={fieldId}\n                  valueProperty={valueProperty}\n                  {...standardProps}\n                />\n              )\n            case 'reference':\n              return (\n                <Reference\n                  fieldId={fieldId}\n                  keyProperty={keyProperty}\n                  {...standardProps}\n                />\n              )\n            case 'password':\n              return (\n                <Password\n                  strength={strength}\n                  fieldId={fieldId}\n                  {...standardProps}\n                />\n              )\n            case 'tags':\n              return <Tags fieldId={fieldId} {...standardProps} />\n            case 'textarea':\n              return <TextArea fieldId={fieldId} {...standardProps} />\n            case 'number':\n              return <NumberField fieldId={fieldId} {...standardProps} />\n            case 'markdown':\n              return <Markdown fieldId={fieldId} {...standardProps} />\n            case 'toggle':\n              return <Toggle fieldId={fieldId} {...standardProps} />\n            default:\n              return <Text fieldId={fieldId} {...standardProps} />\n          }\n        })()}\n      </label>\n      {error && <div className=\"fresh-error\">{error}</div>}\n    </div>\n  )\n}\n\nField.defaultProps = {\n  defaultValue: null,\n  options: [],\n  tooltip: '',\n}\n\nexport default Field\n","import React, { useEffect } from 'react'\nimport { useForm, FormContext } from './state/formState'\nimport CancelButton from './form/CancelButton'\nexport { default as Field } from './Field'\nimport './fields/global.css'\n\ntype FormProps = {\n  cancelAction?: (_: any) => void\n  cancelButton?: boolean\n  cancelText?: string\n  formId: string\n  className?: string\n  defaultValues?: any // sorry. not sure how to type this properly PR wanted\n  onSubmit(formState: { [key: string]: any }): void\n  onChange?(formState: object): void\n  submitText?: string\n}\n\nconst Form: React.FC<FormProps> = ({\n  cancelAction = () => null,\n  onChange = null,\n  cancelButton = true,\n  cancelText = 'Cancel',\n  children,\n  formId,\n  onSubmit,\n  submitText = 'Submit',\n  className = '',\n  defaultValues = {},\n}) => {\n  const { data, register, isReady, unregister } = useForm()\n\n  useEffect(() => {\n    register(defaultValues, formId)\n    return () => {\n      unregister(formId)\n    }\n  }, [])\n\n  if (!isReady[formId]) return null\n\n  return (\n    <FormContext.Provider value={{ formId }}>\n      <form\n        className={`${className} fresh-form`}\n        onSubmit={e => {\n          e.preventDefault()\n          onSubmit(data[formId])\n        }}\n        onChange={() => {\n          if (onChange) onChange(data[formId])\n        }}\n      >\n        {children}\n        <div>\n          <button\n            id=\"fresh-submit\"\n            className=\"fresh-button fresh-submit\"\n            type=\"submit\"\n          >\n            {submitText}\n          </button>\n          {cancelButton && (\n            <CancelButton\n              formId={formId}\n              cancelAction={cancelAction}\n              cancelText={cancelText}\n            />\n          )}\n        </div>\n      </form>\n    </FormContext.Provider>\n  )\n}\n\n// TODO\n// AUto form prop that allows for automatic form building via graphql. Required fields and all\n\n// Future api idea <Form mutation={GRAPHQL_MUTATION} /> one liner\n\n// Reset on submit option\nexport { Form, useForm }\n"],"names":["useForm","create","config","set","get","data","isReady","defaultValues","setForm","formData","formId","state","setField","id","value","setDefaults","register","unregister","registerField","fieldId","defaultValue","resetForm","fn","produce","immer","FormContext","React","createContext","CancelButton","cancelAction","cancelText","className","onClick","type","Tooltip","tooltipIconColor","tooltip","style","tooltipBackground","tooltipColor","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","propTypes","PropTypes","string","defaultProps","Select","options","displayProperty","valueProperty","useEffect","_defaultValues$formId4","onChange","e","target","map","option","i","key","Reference","keyProperty","placeholder","useState","inputValue","setInputValue","isFocused","setIsFocused","_defaultValues$formId3","onFocus","onBlur","filter","toLowerCase","includes","padding","onMouseDown","Password","required","strength","_defaultValues$formId","strengthValue","password","score","length","minimumLength","match","symbols","RegExp","calculateScore","strengthMeter","background","marginBottom","transition","showText","fieldPartialMatch","Tags","TagsInput","marginTop","TextArea","NumberField","parseInt","MarkdownTextArea","Markdown","children","Text","Toggle","checked","_","Field","name","label","error","readOnly","wrapperStyle","replace","index","toUpperCase","useContext","standardProps","htmlFor","cancelButton","onSubmit","submitText","Provider","preventDefault"],"mappings":"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"}