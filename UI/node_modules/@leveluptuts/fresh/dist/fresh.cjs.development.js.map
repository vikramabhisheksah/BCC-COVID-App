{"version":3,"file":"fresh.cjs.development.js","sources":["../src/state/immer.ts","../src/state/formState.ts","../src/form/CancelButton.tsx","../src/form/Tooltip.tsx","../src/fields/Select.tsx","../src/fields/Reference.tsx","../src/fields/Password.tsx","../src/fields/Tags.tsx","../src/fields/TextArea.tsx","../src/fields/Number.tsx","../src/fields/Markdown.tsx","../src/fields/Text.tsx","../src/fields/Toggle.tsx","../src/Field.tsx","../src/index.tsx"],"sourcesContent":["import produce from 'immer'\n\nexport const immer = (config) => (set, get) =>\n  config((fn) => set(produce(fn)), get)\n","import React from 'react'\nimport create from 'zustand'\nimport { immer } from './immer'\n\n// Woof on theses types.\n// TODO fix these types\nconst store = (set: (val: any) => any) => ({\n  data: {},\n  isReady: {},\n  defaultValues: {},\n  setForm: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n    }),\n  setField: (id: string, value: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][id] = value\n    }),\n  setDefaults: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.defaultValues[formId] = { ...formData }\n    }),\n  register: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n      state.defaultValues[formId] = { ...formData }\n      state.isReady[formId] = true\n    }),\n  unregister: (formId: string) =>\n    set((state: any) => {\n      state.isReady[formId] = false\n    }),\n  registerField: (fieldId: string, defaultValue: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][fieldId] = defaultValue\n    }),\n  resetForm: (formId: string) =>\n    set((state: any) => {\n      state.data[formId] = state.defaultValues[formId]\n    }),\n})\n\nexport const useForm = create(immer(store))\n\nexport const FormContext = React.createContext(null)\n","import React from 'react'\nimport { useForm } from '../state/formState'\n\nconst CancelButton = ({\n  cancelAction,\n  cancelText = 'Cancel',\n  formId,\n}: Props) => {\n  const { data, setField, isReady, resetForm } = useForm()\n  return (\n    <button\n      id=\"fresh-cancel\"\n      className=\"fresh-button fresh-cancel\"\n      onClick={() => {\n        cancelAction(formId)\n        resetForm(formId)\n      }}\n      type=\"reset\"\n    >\n      {cancelText}\n    </button>\n  )\n}\n\ntype Props = {\n  cancelAction: (resetForm) => void\n  cancelText: string\n  formId: string\n}\nexport default CancelButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\ninterface TooltipInterface {\n  tooltip: string\n  tooltipBackground: string\n  tooltipColor: string\n  tooltipIconColor: string\n}\n\nconst Tooltip = ({\n  tooltip,\n  tooltipBackground,\n  tooltipColor,\n  tooltipIconColor,\n}: TooltipInterface) => {\n  const tooltipStyle = {\n    '--fresh-tooltip-background': tooltipBackground,\n    '--fresh-tooltip-color': tooltipColor,\n    '--fresh-tooltip-icon-color': tooltipIconColor,\n  } as React.CSSProperties\n  return (\n    <span className=\"fresh-tooltip\" data-tooltip={tooltip} style={tooltipStyle}>\n      <svg\n        className=\"fresh-tooltip-icon\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM9.02539 5.91797H5.84668V7.79102H6.91309V11.127H5.84668V13H10.0098V11.127H9.02539V5.91797ZM6.89258 3.16309C6.83333 3.30892 6.80371 3.46615 6.80371 3.63477C6.80371 3.80339 6.83333 3.96289 6.89258 4.11328C6.95638 4.25911 7.04297 4.38672 7.15234 4.49609C7.26172 4.60547 7.38932 4.69206 7.53516 4.75586C7.68555 4.81966 7.84733 4.85156 8.02051 4.85156C8.18457 4.85156 8.33952 4.81966 8.48535 4.75586C8.63118 4.69206 8.75879 4.60547 8.86816 4.49609C8.97754 4.38672 9.06413 4.25911 9.12793 4.11328C9.19173 3.96289 9.22363 3.80339 9.22363 3.63477C9.22363 3.46615 9.19173 3.30892 9.12793 3.16309C9.06413 3.0127 8.97754 2.88281 8.86816 2.77344C8.75879 2.66406 8.63118 2.57747 8.48535 2.51367C8.33952 2.44987 8.18457 2.41797 8.02051 2.41797C7.84733 2.41797 7.68555 2.44987 7.53516 2.51367C7.38932 2.57747 7.26172 2.66406 7.15234 2.77344C7.04297 2.88281 6.95638 3.0127 6.89258 3.16309Z\"\n          fill={tooltipIconColor}\n        />\n      </svg>\n    </span>\n  )\n}\n\nTooltip.propTypes = {\n  tooltip: PropTypes.string,\n  tooltipBackground: PropTypes.string,\n  tooltipColor: PropTypes.string,\n  tooltipIconColor: PropTypes.string,\n}\n\nTooltip.defaultProps = {\n  tooltip: '',\n  tooltipBackground: '#eee',\n  tooltipColor: '#000',\n  tooltipIconColor: '#000',\n}\nexport default Tooltip\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Select = ({\n  options,\n  fieldId,\n  formId,\n  displayProperty = '',\n  valueProperty = '',\n  className = '',\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId]\n      ? defaultValues?.[formId]?.[fieldId]?.[valueProperty] ||\n        defaultValues?.[formId]?.[fieldId]\n      : options[0]\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <select\n      id={`fresh-${fieldId}-${formId}`}\n      className={`fresh-input fresh-input-select ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n      value={data[formId][fieldId]}\n    >\n      {options.map((option, i) => (\n        <option\n          value={option?.[valueProperty] || option}\n          key={`fresh-${fieldId}-${formId}-${i}`}\n          className=\"fresh-option\"\n        >\n          {option?.[displayProperty] || option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import React, { useState, useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Reference = ({\n  options,\n  fieldId,\n  keyProperty = 'id',\n  displayProperty,\n  placeholder = '',\n  className = '',\n  formId,\n}: FieldInterface) => {\n  const { data, setField, isReady, defaultValues, registerField } = useForm()\n  const [inputValue, setInputValue] = useState(defaultValues?.[formId]?.[fieldId]?.[displayProperty] || '')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  // If the form is not registered or there is not data object\n  if (!isReady) return null\n  return (\n    <>\n      <input\n        id={`fresh-${fieldId}-${formId}`}\n        onChange={e => setInputValue(e.target.value)}\n        value={inputValue}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        placeholder={placeholder}\n        type=\"text\"\n        className={`fresh-input fresh-input-reference ${className}`}\n      />\n      {isFocused && (\n        <div className=\"fresh-focused\">\n          {options\n            .filter(option =>\n              option[displayProperty]\n                .toLowerCase()\n                .includes(inputValue.toLowerCase())\n            )\n            .map(option => (\n              <div\n                key={option[keyProperty]}\n                style={{ padding: '0.75em' }}\n                onMouseDown={() => {\n                  setField(fieldId, option, formId)\n                  setInputValue(option[displayProperty])\n                }}\n              >\n                {option[displayProperty]}\n              </div>\n            ))}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Reference\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Password = ({\n  placeholder,\n  className = '',\n  required,\n  fieldId,\n  strength = true,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  // If the form is not registered or there is not data object\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  const strengthValue = calculateScore(data[formId][fieldId] ?? '')\n\n  let strengthMeter = {\n    background: '#ccc',\n    width: 'calc(193px * 0.25)',\n  }\n  if (strengthValue >= 2 && strengthValue < 3) {\n    strengthMeter = {\n      width: 'calc(193px * 0.5)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 3 && strengthValue < 4) {\n    strengthMeter = {\n      width: 'calc(193px * 0.75)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 4) {\n    strengthMeter = {\n      width: 'calc(193px * 1)',\n      background: 'green',\n    }\n  }\n  return (\n    <>\n      <input\n        className={`fresh-input fresh-input-password ${className}`}\n        placeholder={placeholder}\n        type={type}\n        required={required}\n        id={`fresh-${fieldId}-${formId}`}\n        value={data[formId][fieldId]}\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      {strength && (\n        <div\n          style={{\n            height: '4px',\n            marginBottom: '1rem',\n            transition: '0.3s ease all',\n            ...strengthMeter,\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nconst options = {\n  showText: true,\n  fieldPartialMatch: true,\n  minimumLength: 4,\n}\n\nfunction calculateScore(password: string) {\n  var score = 0\n\n  // password < options.minimumLength\n  if (password.length < options.minimumLength) {\n    return -1\n  }\n  // password length\n  score += password.length * 4\n\n  // password has 3 numbers\n  if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {\n    score += 5\n  }\n\n  // password has at least 2 sybols\n  var symbols: any = '.*[!,@,#,$,%,^,&,*,?,_,~]'\n  symbols = new RegExp('(' + symbols + symbols + ')')\n  if (password.match(symbols)) {\n    score += 5\n  }\n\n  // password has Upper and Lower chars\n  if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {\n    score += 10\n  }\n\n  // password has number and chars\n  if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {\n    score += 15\n  }\n\n  // password has number and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([0-9])/)\n  ) {\n    score += 15\n  }\n\n  // password has char and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([a-zA-Z])/)\n  ) {\n    score += 15\n  }\n\n  // password is just numbers or chars\n  if (password.match(/^\\w+$/) || password.match(/^\\d+$/)) {\n    score -= 10\n  }\n\n  if (score > 100) {\n    score = 100\n  }\n\n  if (score < 0) {\n    score = 0\n  }\n\n  return score * 0.04\n}\n\nexport default Password\n","import React, { useEffect } from 'react'\nimport TagsInput from 'react-tagsinput'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Tags = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? []\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <TagsInput\n      value={data[formId][fieldId] || []}\n      onChange={(value: string[]) => setField(fieldId, value, formId)}\n      className={`fresh-input-tags ${className}`}\n      id={`fresh-${fieldId}-${formId}`}\n      style={{\n        marginTop: '1rem',\n      }}\n    />\n  )\n}\n\nexport default Tags\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\n\ninterface RefValue {\n  id: string\n  text: string\n}\n\ntype Props = {\n  required?: boolean\n  children: string\n  type?: string\n  fieldId?: string\n  name?: string\n  label?: boolean\n  error?: string\n  placeholder?: string\n  options: any\n  className?: string\n  tooltip?: string\n  strength?: boolean\n  displayProperty?: string\n  formId: string\n}\n\nexport const TextArea: React.FC<Props> = ({\n  className,\n  fieldId,\n  formId,\n  placeholder,\n}) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <textarea\n      id={`fresh-${fieldId}-${formId}`}\n      placeholder={placeholder}\n      value={data[formId][fieldId]}\n      className={`fresh-input fresh-input-textarea ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default TextArea\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst NumberField = ({\n  fieldId,\n  placeholder,\n  required,\n  formId,\n  className,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-number ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type=\"number\"\n      value={data[formId][fieldId]}\n      onChange={e => {\n        const value = e.target.value ? parseInt(e.target.value) : null\n        setField(fieldId, value, formId)\n      }}\n    />\n  )\n}\n\nexport default NumberField\n","import React, { useEffect } from 'react'\nimport Markdown from 'markdown-to-jsx'\nimport { useForm } from '../state/formState'\n\nimport { FieldInterface } from './types'\n\nexport const MarkdownTextArea = ({\n  fieldId,\n  placeholder,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className=\"fresh-markdown-wrapper\">\n      <textarea\n        id={`fresh-${fieldId}`}\n        placeholder={placeholder}\n        value={data[formId][fieldId]}\n        className=\"fresh-input fresh-input-textarea\"\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      <div className=\"fresh-input fresh-input-markdown\">\n        <Markdown children={data[formId][fieldId] || ''} />\n      </div>\n    </div>\n  )\n}\n\nexport default MarkdownTextArea\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Text = ({\n  className,\n  fieldId,\n  placeholder,\n  required,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-${type} ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type={type}\n      value={data[formId][fieldId]}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default Text\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Toggle = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? false\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className={`${className} fresh-switch`}>\n      <input\n        checked={data[formId][fieldId] || false}\n        type=\"checkbox\"\n        id={`fresh-${fieldId}`}\n        className=\"fresh-input-toggle\"\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n      <span\n        className={`fresh-slider ${data[formId][fieldId] ? `on` : ''}`}\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n    </div>\n  )\n}\n\nexport default Toggle\n","import React, { useContext } from 'react'\nimport { FormContext } from './state/formState'\nimport { FieldInterface } from './fields/types'\nimport Tooltip from './form/Tooltip'\nimport Select from './fields/Select'\nimport Reference from './fields/Reference'\nimport Password from './fields/Password'\nimport Tags from './fields/Tags'\nimport TextArea from './fields/TextArea'\nimport NumberField from './fields/Number'\nimport Markdown from './fields/Markdown'\nimport Text from './fields/Text'\nimport Toggle from './fields/Toggle'\n\nconst camelCase = str => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return ''\n    return index == 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nconst Field = ({\n  required = false,\n  children,\n  name = '',\n  type = 'text',\n  label = true,\n  error,\n  placeholder = '',\n  options,\n  strength,\n  className = '',\n  defaultValue = '',\n  displayProperty = '',\n  valueProperty = '',\n  keyProperty = 'id',\n  tooltip,\n  readOnly = false,\n  wrapperStyle = {},\n}: FieldInterface) => {\n  const fieldId = name || camelCase(children)\n  const { formId } = useContext(FormContext)\n\n  const standardProps = {\n    children,\n    required,\n    name,\n    type,\n    label,\n    error,\n    placeholder,\n    options,\n    className,\n    defaultValue,\n    displayProperty,\n    readOnly,\n    formId,\n  }\n  return (\n    <div className={`fresh-field-wrapper ${fieldId}`} style={wrapperStyle}>\n      <label className=\"fresh-label\" htmlFor={`fresh-${fieldId}`}>\n        <span className=\"fresh-title\">\n          {required && '*'} {label && children}&nbsp;\n          {tooltip && <Tooltip tooltip={tooltip} />}\n        </span>\n        {(() => {\n          switch (type) {\n            case 'select':\n              return (\n                <Select\n                  fieldId={fieldId}\n                  valueProperty={valueProperty}\n                  {...standardProps}\n                />\n              )\n            case 'reference':\n              return (\n                <Reference\n                  fieldId={fieldId}\n                  keyProperty={keyProperty}\n                  {...standardProps}\n                />\n              )\n            case 'password':\n              return (\n                <Password\n                  strength={strength}\n                  fieldId={fieldId}\n                  {...standardProps}\n                />\n              )\n            case 'tags':\n              return <Tags fieldId={fieldId} {...standardProps} />\n            case 'textarea':\n              return <TextArea fieldId={fieldId} {...standardProps} />\n            case 'number':\n              return <NumberField fieldId={fieldId} {...standardProps} />\n            case 'markdown':\n              return <Markdown fieldId={fieldId} {...standardProps} />\n            case 'toggle':\n              return <Toggle fieldId={fieldId} {...standardProps} />\n            default:\n              return <Text fieldId={fieldId} {...standardProps} />\n          }\n        })()}\n      </label>\n      {error && <div className=\"fresh-error\">{error}</div>}\n    </div>\n  )\n}\n\nField.defaultProps = {\n  defaultValue: null,\n  options: [],\n  tooltip: '',\n}\n\nexport default Field\n","import React, { useEffect } from 'react'\nimport { useForm, FormContext } from './state/formState'\nimport CancelButton from './form/CancelButton'\nexport { default as Field } from './Field'\nimport './fields/global.css'\n\ntype FormProps = {\n  cancelAction?: (_: any) => void\n  cancelButton?: boolean\n  cancelText?: string\n  formId: string\n  className?: string\n  defaultValues?: any // sorry. not sure how to type this properly PR wanted\n  onSubmit(formState: { [key: string]: any }): void\n  onChange?(formState: object): void\n  submitText?: string\n}\n\nconst Form: React.FC<FormProps> = ({\n  cancelAction = () => null,\n  onChange = null,\n  cancelButton = true,\n  cancelText = 'Cancel',\n  children,\n  formId,\n  onSubmit,\n  submitText = 'Submit',\n  className = '',\n  defaultValues = {},\n}) => {\n  const { data, register, isReady, unregister } = useForm()\n\n  useEffect(() => {\n    register(defaultValues, formId)\n    return () => {\n      unregister(formId)\n    }\n  }, [])\n\n  if (!isReady[formId]) return null\n\n  return (\n    <FormContext.Provider value={{ formId }}>\n      <form\n        className={`${className} fresh-form`}\n        onSubmit={e => {\n          e.preventDefault()\n          onSubmit(data[formId])\n        }}\n        onChange={() => {\n          if (onChange) onChange(data[formId])\n        }}\n      >\n        {children}\n        <div>\n          <button\n            id=\"fresh-submit\"\n            className=\"fresh-button fresh-submit\"\n            type=\"submit\"\n          >\n            {submitText}\n          </button>\n          {cancelButton && (\n            <CancelButton\n              formId={formId}\n              cancelAction={cancelAction}\n              cancelText={cancelText}\n            />\n          )}\n        </div>\n      </form>\n    </FormContext.Provider>\n  )\n}\n\n// TODO\n// AUto form prop that allows for automatic form building via graphql. Required fields and all\n\n// Future api idea <Form mutation={GRAPHQL_MUTATION} /> one liner\n\n// Reset on submit option\nexport { Form, useForm }\n"],"names":["immer","config","set","get","fn","produce","store","data","isReady","defaultValues","setForm","formData","formId","state","setField","id","value","setDefaults","register","unregister","registerField","fieldId","defaultValue","resetForm","useForm","create","FormContext","React","createContext","CancelButton","cancelAction","cancelText","className","onClick","type","Tooltip","tooltip","tooltipBackground","tooltipColor","tooltipIconColor","tooltipStyle","style","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","propTypes","PropTypes","string","defaultProps","Select","options","displayProperty","valueProperty","useEffect","onChange","e","target","map","option","i","key","Reference","keyProperty","placeholder","useState","inputValue","setInputValue","isFocused","setIsFocused","onFocus","onBlur","filter","toLowerCase","includes","padding","onMouseDown","Password","required","strength","strengthValue","calculateScore","strengthMeter","background","marginBottom","transition","showText","fieldPartialMatch","minimumLength","password","score","length","match","symbols","RegExp","Tags","TagsInput","marginTop","TextArea","NumberField","parseInt","MarkdownTextArea","Markdown","children","Text","Toggle","checked","_","camelCase","str","replace","index","toUpperCase","Field","name","label","error","readOnly","wrapperStyle","useContext","standardProps","htmlFor","Form","cancelButton","onSubmit","submitText","Provider","preventDefault"],"mappings":"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"}