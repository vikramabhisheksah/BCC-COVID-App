"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

require("../styles/styles.scss");

var _MultipleValueTextInputItem = _interopRequireDefault(require("./MultipleValueTextInputItem"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var propTypes = {
  /** Any values the input's collection should be prepopulated with. */
  values: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Method which should be called when an item is added to the collection */
  onItemAdded: _propTypes["default"].func.isRequired,

  /** Method which should be called when an item is removed from the collection */
  onItemDeleted: _propTypes["default"].func.isRequired,

  /** Label to be attached to the input, if desired */
  label: _propTypes["default"].string,

  /** Name attribute for the input */
  name: _propTypes["default"].string.isRequired,

  /** Placeholder attribute for the input, if desired */
  placeholder: _propTypes["default"].string,

  /** ASCII charcode for the keys which should
   * trigger an item to be added to the collection (defaults to comma (44) and Enter (13))
   */
  charCodes: _propTypes["default"].arrayOf(_propTypes["default"].number),

  /** JSX or string which will be used as the control to delete an item from the collection */
  deleteButton: _propTypes["default"].node,

  /** Whether or not the blur event should trigger the added-item handler */
  shouldAddOnBlur: _propTypes["default"].bool,

  /** Custom class name for the input element */
  className: _propTypes["default"].string,

  /** Custom class name for the input label element */
  labelClassName: _propTypes["default"].string
};
var defaultProps = {
  placeholder: '',
  charCodes: [13, 44],
  deleteButton: _react["default"].createElement("span", null, "\xD7"),
  values: [],
  label: '',
  shouldAddOnBlur: false,
  className: '',
  labelClassName: ''
};
/**
 * A text input component for React which maintains and displays a collection
 * of entered values as an array of strings.
 */

var MultipleValueTextInput = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(MultipleValueTextInput, _Component);

  var _super = _createSuper(MultipleValueTextInput);

  function MultipleValueTextInput(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, MultipleValueTextInput);
    _this = _super.call(this, props);
    _this.state = {
      values: props.values,
      value: ''
    };
    _this.handleKeypress = _this.handleKeypress.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleValueChange = _this.handleValueChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleItemAdd = _this.handleItemAdd.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleItemRemove = _this.handleItemRemove.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(MultipleValueTextInput, [{
    key: "handleKeypress",
    value: function handleKeypress(e) {
      var _this$props = this.props,
          onItemAdded = _this$props.onItemAdded,
          charCodes = _this$props.charCodes; // 13: Enter, 44: Comma

      if (charCodes.includes(e.charCode)) {
        e.preventDefault();
        this.handleItemAdd(e.target.value, onItemAdded);
      }
    }
  }, {
    key: "handleValueChange",
    value: function handleValueChange(e) {
      this.setState({
        value: e.target.value
      });
    }
  }, {
    key: "handleItemAdd",
    value: function handleItemAdd(value, onItemAdded) {
      if (this.state.values.includes(value) || !value) {
        this.setState({
          value: ''
        });
        return;
      }

      var newValues = this.state.values.concat(value);
      this.setState({
        values: newValues,
        value: ''
      });
      onItemAdded(value, newValues);
    }
  }, {
    key: "handleItemRemove",
    value: function handleItemRemove(value) {
      var currentValues = this.state.values;
      var newValues = currentValues.filter(function (v) {
        return v !== value;
      });
      this.props.onItemDeleted(value, newValues);
      this.setState({
        values: newValues
      });
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(e) {
      var _this$props2 = this.props,
          onItemAdded = _this$props2.onItemAdded,
          shouldAddOnBlur = _this$props2.shouldAddOnBlur; // 13: Enter, 44: Comma

      if (shouldAddOnBlur) {
        e.preventDefault();
        this.handleItemAdd(e.target.value, onItemAdded);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          placeholder = _this$props3.placeholder,
          label = _this$props3.label,
          name = _this$props3.name,
          deleteButton = _this$props3.deleteButton,
          onItemAdded = _this$props3.onItemAdded,
          onItemDeleted = _this$props3.onItemDeleted,
          className = _this$props3.className,
          labelClassName = _this$props3.labelClassName,
          charCodes = _this$props3.charCodes,
          InputValues = _this$props3.values,
          shouldAddOnBlur = _this$props3.shouldAddOnBlur,
          forwardedProps = (0, _objectWithoutProperties2["default"])(_this$props3, ["placeholder", "label", "name", "deleteButton", "onItemAdded", "onItemDeleted", "className", "labelClassName", "charCodes", "values", "shouldAddOnBlur"]);
      var values = this.state.values && this.state.values.length ? this.state.values : this.props.values;
      var valueDisplays = values.map(function (v) {
        return _react["default"].createElement(_MultipleValueTextInputItem["default"], {
          value: v,
          key: v,
          deleteButton: deleteButton,
          handleItemRemove: _this2.handleItemRemove
        });
      });
      return _react["default"].createElement("div", {
        className: "multiple-value-text-input"
      }, _react["default"].createElement("label", {
        htmlFor: name,
        className: labelClassName
      }, label, _react["default"].createElement("div", {
        className: "multiple-value-text-input-item-container"
      }, values.length > 0 && _react["default"].createElement("p", null, valueDisplays)), _react["default"].createElement("input", (0, _extends2["default"])({
        name: name,
        placeholder: placeholder,
        value: this.state.value,
        type: "text",
        onKeyPress: this.handleKeypress,
        onChange: this.handleValueChange,
        onBlur: this.handleBlur,
        className: className
      }, forwardedProps))));
    }
  }]);
  return MultipleValueTextInput;
}(_react.Component);

MultipleValueTextInput.propTypes = propTypes;
MultipleValueTextInput.defaultProps = defaultProps;
var _default = MultipleValueTextInput;
exports["default"] = _default;